CREATE GRAPH Artemis()
CREATE SCHEMA_CHANGE JOB create_artemis_graph FOR GRAPH Artemis { 
  ADD VERTEX DomainRecord(PRIMARY_ID id STRING, dnssec STRING, name STRING, entropy FLOAT, MaliciousFlag BOOL, community INT) WITH STATS="OUTDEGREE_BY_EDGETYPE", PRIMARY_ID_AS_ATTRIBUTE="true";
  ADD VERTEX DomainName(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX Country(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX City(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX Emails(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX Organisation(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX Nameserver(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX Registrar(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX DomainRecordStatus(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD VERTEX WhoisServer(PRIMARY_ID id STRING) WITH STATS="OUTDEGREE_BY_EDGETYPE";
  ADD UNDIRECTED EDGE DomainRecord_DomainName(FROM DomainRecord, TO DomainName);
  ADD UNDIRECTED EDGE Country_City(FROM Country, TO City);
  ADD UNDIRECTED EDGE DomainRecord_Country(FROM DomainRecord, TO Country);
  ADD UNDIRECTED EDGE DomainRecord_Emails(FROM DomainRecord, TO Emails);
  ADD UNDIRECTED EDGE DomainRecord_Organisation(FROM DomainRecord, TO Organisation);
  ADD UNDIRECTED EDGE DomainRecord_Nameserver(FROM DomainRecord, TO Nameserver);
  ADD UNDIRECTED EDGE DomainRecord_Registrar(FROM DomainRecord, TO Registrar);
  ADD UNDIRECTED EDGE DomainRecord_DomainRecordStatus(FROM DomainRecord, TO DomainRecordStatus);
  ADD UNDIRECTED EDGE DomainRecord_WhoisServer(FROM DomainRecord, TO WhoisServer);
  ADD UNDIRECTED EDGE DomainRecord_A_Org(FROM DomainRecord, TO Organisation);
  ADD UNDIRECTED EDGE DomainRecord_MX_Org(FROM DomainRecord, TO Organisation);
  ADD UNDIRECTED EDGE co_registrar(FROM DomainRecord, TO DomainRecord);
  ADD UNDIRECTED EDGE co_org(FROM DomainRecord, TO DomainRecord);
  ADD UNDIRECTED EDGE co_nameserver(FROM DomainRecord, TO DomainRecord);
}
RUN SCHEMA_CHANGE JOB create_artemis_graph
DROP JOB create_artemis_graph
set exit_on_error = "false"
CREATE LOADING JOB load_job_whois_data FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX DomainRecord VALUES($1, $2, $3,0, $4) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

CREATE LOADING JOB load_job_whois_data_country FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Country VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_Country VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_whois_data_domain_name FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX DomainName VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_DomainName VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

CREATE LOADING JOB load_job_whois_data_domain_status FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX DomainRecordStatus VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_DomainRecordStatus VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_whois_data_emails FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Emails VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_Emails VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }

CREATE LOADING JOB load_job_whois_data_name_servers FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Nameserver VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_Nameserver VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_whois_data_registrar FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Registrar VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_Registrar VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_whois_data_whois_server FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX WhoisServer VALUES($2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_WhoisServer VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_entropy FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX DomainRecord VALUES($0, _, _, $1, _) USING SEPARATOR=",", HEADER="false", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_A_org FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Organisation VALUES($1) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_A_Org VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }


CREATE LOADING JOB load_job_MX_org FOR GRAPH Artemis {
      DEFINE FILENAME MyDataSource;
      LOAD MyDataSource TO VERTEX Organisation VALUES($1) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
      LOAD MyDataSource TO EDGE DomainRecord_MX_Org VALUES($1, $2) USING SEPARATOR=",", HEADER="true", EOL="\n", QUOTE="double";
    }



CREATE QUERY community_stuff(/* Parameters here */) FOR GRAPH Artemis { 
  /* Write query logic here */ 
  tmp = select d1 FROM DomainRecord:d1 -(DomainRecord_Registrar:r1)- Registrar:r -(DomainRecord_Registrar:r2)- DomainRecord:d2 where d1 != d2
  ACCUM INSERT INTO co_registrar values (d1, d2);
  
  tmp = select d1 FROM DomainRecord:d1 -(DomainRecord_A_Org:r1)- Organisation:r -(DomainRecord_A_Org:r2)- DomainRecord:d2 where d1 != d2
  ACCUM INSERT INTO co_org values (d1, d2);
  
  tmp = select d1 FROM DomainRecord:d1 -(DomainRecord_Nameserver:r1)- Nameserver:r -(DomainRecord_Nameserver:r2)- DomainRecord:d2 where d1 != d2
  ACCUM INSERT INTO co_nameserver values (d1, d2);
  
}


CREATE QUERY delete_co_edges(/* Parameters here */) FOR GRAPH Artemis { 
  S = {DomainRecord.*};
  DELETE e FROM S:s -(co_registrar:e)-;
  DELETE e FROM S:s -(co_org:e)-;
  DELETE e FROM S:s -(co_nameserver:e)-;
  
}

CREATE QUERY delete_co_loop_edges(/* Parameters here */) FOR GRAPH Artemis { 
  S = {DomainRecord.*};
  DELETE e FROM S:s -(co_registrar:e)- DomainRecord:t where s==t;
  DELETE e FROM S:s -(co_org:e)- DomainRecord:t where s==t;
  DELETE e FROM S:s -(co_nameserver:e)- DomainRecord:t where s==t;
}

CREATE QUERY tg_label_prop (SET<STRING> v_type, SET<STRING> e_type, INT max_iter, INT output_limit, 
  BOOL print_accum = TRUE, STRING file_path = "", STRING attr = "")  FOR GRAPH Artemis SYNTAX V1 {

# Partition the vertices into communities, according to the Label Propagation method.
# Indicate community membership by assigning each vertex a community ID.

OrAccum @@or_changed = true;
MapAccum<INT, INT> @map;     # <communityId, numNeighbors>
MapAccum<INT, INT> @@comm_sizes_map;   # <communityId, members>
SumAccum<INT> @sum_label, @sum_num;  
FILE f (file_path);
Start = {v_type};

# Assign unique labels to each vertex
Start = SELECT s 
        FROM Start:s 
        ACCUM s.@sum_label = getvid(s);

# Propagate labels to neighbors until labels converge or the max iterations is reached
WHILE @@or_changed == true LIMIT max_iter DO
    @@or_changed = false;
    Start = SELECT s 
            FROM Start:s -(e_type:e)- :t
            ACCUM t.@map += (s.@sum_label -> 1)  # count the occurrences of neighbor's labels
            POST-ACCUM
                INT max_v = 0,
                INT label = 0,
                # Iterate over the map to get the neighbor label that occurs most often
                FOREACH (k,v) IN t.@map DO
                    CASE WHEN v > max_v THEN
                        max_v = v,
                        label = k
                    END
                END,
                # When the neighbor search finds a label AND it is a new label
                # AND the label's count has increased, update the label.
                CASE WHEN label != 0 AND t.@sum_label != label AND max_v > t.@sum_num THEN
                    @@or_changed += true,
                    t.@sum_label = label,
                    t.@sum_num = max_v
                END,
                t.@map.clear();
END;

Start = {v_type};
Start =  SELECT s 
         FROM Start:s
         POST-ACCUM 
             IF attr != "" THEN 
                 s.setAttr(attr, s.@sum_label) 
             END,
               
             IF file_path != "" THEN 
                 f.println(s, s.@sum_label) 
             END,
               
             IF print_accum THEN 
                 @@comm_sizes_map += (s.@sum_label -> 1) 
             END
         LIMIT output_limit;

IF print_accum THEN 
    PRINT @@comm_sizes_map;
    PRINT Start[Start.@sum_label];
END;
}

CREATE QUERY tg_louvain(SET<STRING> v_type, SET<STRING> e_type, STRING wt_attr = "weight", INT max_iter = 10, 
  STRING result_attr = "cid", STRING file_path = "", BOOL print_info = FALSE) FOR GRAPH Artemis SYNTAX V1 {

  /*
  louvain community detection algorithm
  add keyword DISTRIBUTED for cluster environment

  Parameters:
  v_type: vertex types to traverse
  e_type: edge types to traverse
  wt_attr: attribute name for edge weights use empty string is graph is unweighted
  wt_attr type is hardcoded to FLOAT INT or DOUBLE can be supported by changing all `e.getAttr(wt_attr, "FLOAT")`
  to `e.getAttr(wt_attr, "INT")` or `e.getAttr(wt_attr, "DOUBLE")`
  * note: when there is a weight attribute missmatch, there may not be an explicit error message
  all print results showing 0 data are present is an indication that there might be a weight attribute missmatch
  
  max_iter: maximum iteration of louvain optimization
  result_attr: attribute name to assign community id results to; use empty string to skip
  file_path: file path to write CSV output to; use empty string to skip
  print_info: print louvain execution info
  */

  TYPEDEF TUPLE <FLOAT deltaQ, FLOAT weight, VERTEX cc> move;
  SumAccum<FLOAT> @sum_ac; #sum of the degrees of all the vertices in community C of the vertex
  ListAccum<VERTEX> @cc_list; #the community center
  SumAccum<FLOAT> @sum_weight; # total weight incident to this vertex
  SumAccum<FLOAT> @sum_cc_weight; # total weight incident to the cc vertex
  MapAccum<VERTEX,SumAccum<FLOAT>> @A_map; #A[c]: sum of the edge weights for the edges in community c
  MaxAccum<move> @max_best_move; # highest dQ, highest -Outdegree, highest cc
  ListAccum<VERTEX> @cm_list;  #community member list
  SumAccum<FLOAT> @@sum_m; # total edge weight
  SumAccum<INT> @sum_outdegree;   # helper variable for outdegree calculation
  SumAccum<INT> @@sum_cc_change;
  MapAccum<INT, SumAccum<INT>> @@community_map;
  MapAccum<INT, SumAccum<INT>> @@community_size_count;
  FILE f(file_path);

  // initialize
  Start = {v_type};
  Start = SELECT s 
          FROM Start:s -(e_type:e)- :t
          ACCUM
              @@sum_m += e.getAttr(wt_attr, "FLOAT")*0.5,
              s.@sum_weight += e.getAttr(wt_attr, "FLOAT")*1.0,
              s.@sum_cc_weight += e.getAttr(wt_attr, "FLOAT")*1.0,
              s.@sum_outdegree += 1
          // mark @cc only for vertices with more than 1 neighbors
          // and only the marked vertices will participate in the actual louvain algorithm
          // the unmorked vertices will be resolved by the vertex following heuristic
          POST-ACCUM
              IF s.@sum_outdegree > 1 THEN 
                  s.@cc_list += s 
              END;
  IF print_info THEN
      PRINT Start.size() AS AllVertexCount;
  END;

  // special @cc update in the first iteration
  Start = SELECT t 
          FROM Start:s -(e_type:e)- :t
          WHERE s.@sum_outdegree > 1 AND t.@sum_outdegree > 1
          ACCUM
              t.@max_best_move += move(e.getAttr(wt_attr, "FLOAT")*1.0 + @@sum_m*t.@sum_weight * 
              (t.@sum_weight - s.@sum_weight), -s.@sum_cc_weight, s.@cc_list.get(0))
          POST-ACCUM
              IF t.@max_best_move.deltaQ > 0 THEN
                  IF -t.@max_best_move.weight < t.@sum_cc_weight THEN
                      t.@cc_list.clear(),
                      t.@cc_list += t.@max_best_move.cc,
                      t.@sum_cc_weight = -t.@max_best_move.weight,
                      @@sum_cc_change += 1
                  ELSE
                      IF -t.@max_best_move.weight == t.@sum_cc_weight AND getvid(t) < getvid(t.@max_best_move.cc)  THEN
                          t.@cc_list.clear(),
                          t.@cc_list += t.@max_best_move.cc,
                          t.@sum_cc_weight = -t.@max_best_move.weight,
                          @@sum_cc_change += 1
                      END
                  END
              END;
  IF print_info THEN
      PRINT @@sum_cc_change AS InitChangeCount;
  END;

  // main loop
  WHILE @@sum_cc_change > 0 LIMIT max_iter DO
      // initialize for iteration
      @@sum_cc_change = 0;
      Start = SELECT s 
              FROM Start:s
              WHERE s.@sum_outdegree > 1
              POST-ACCUM
                  s.@sum_ac = 0,
                  s.@cm_list.clear(),
                  s.@A_map.clear();

      Start = SELECT s 
              FROM Start:s
              ACCUM
                  FOREACH v IN s.@cc_list DO
                      CASE WHEN getvid(v) != -1 THEN 
                          v.@cm_list += s 
                      END
                  END;

      Start = SELECT s 
              FROM Start:s -(e_type:e)- :t
              WHERE t.@sum_outdegree > 1
              ACCUM 
                  s.@A_map += (t.@cc_list.get(0) -> e.getAttr(wt_attr, "FLOAT")*1.0);

      Start = SELECT s 
              FROM Start:s
              ACCUM
                  FOREACH v IN s.@cc_list DO
                      CASE WHEN getvid(v) != -1 THEN 
                          v.@sum_ac += s.@sum_weight 
                      END
                  END;

      Start = SELECT s 
              FROM Start:s
              ACCUM
                  FOREACH v IN s.@cm_list DO
                      CASE WHEN getvid(v) != -1 THEN 
                          v.@sum_ac = s.@sum_ac 
                      END
                  END;

      // compute @max_dQ
      Start = SELECT s 
              FROM Start:s -(e_type:e)- :t
              WHERE t.@sum_outdegree > 1
              ACCUM
                  INT A_s = 0,
                  IF s.@A_map.containsKey(s) THEN 
                      A_s = s.@A_map.get(s) 
                  END,
                  s.@max_best_move += move(s.@A_map.get(t.@cc_list.get(0)) - A_s + 
                  1/@@sum_m*s.@sum_weight*(s.@sum_ac-t.@sum_ac), -t.@sum_cc_weight, t.@cc_list.get(0))
              POST-ACCUM
                  IF s.@max_best_move.deltaQ > 0 THEN
                      IF -s.@max_best_move.weight < s.@sum_cc_weight THEN   // smallest best_move weight < current weight
                          s.@cc_list.clear(),
                          s.@cc_list += s.@max_best_move.cc,
                          s.@sum_cc_weight = -s.@max_best_move.weight,
                          @@sum_cc_change += 1
                      ELSE
                          IF -s.@max_best_move.weight == s.@sum_cc_weight AND getvid(s.@cc_list.get(0)) < getvid(s.@max_best_move.cc)  THEN
                              s.@cc_list.clear(),
                              s.@cc_list += s.@max_best_move.cc,
                              s.@sum_cc_weight = -s.@max_best_move.weight,
                              @@sum_cc_change += 1
                          END
                      END
                  END;
      IF print_info THEN
          PRINT @@sum_cc_change AS IterChangeCount;
      END;
  END;

  // process node with outdegree=1
  // follow the vertex to its neighbor's community
  // if the neighbor also have outdegree=1, mark the two vertices as one community
  Start = {v_type};
  Start = SELECT s 
          FROM Start:s -(e_type:e)- :t
          WHERE s.@sum_outdegree == 1 AND t.@sum_outdegree != 1
          ACCUM 
              s.@cc_list += t.@cc_list.get(0);
  IF print_info THEN
      PRINT Start.size() AS VertexFollowedToCommunity;
  END;

  Start = {v_type};
  Start = SELECT s 
          FROM Start:s -(e_type:e)- :t
          WHERE s.@sum_outdegree == 1 AND t.@sum_outdegree == 1
          ACCUM
              IF getvid(s) <= getvid(t) THEN
                  s.@cc_list += s
              ELSE
                  s.@cc_list += t
              END;
  IF print_info THEN
      PRINT Start.size() AS VertexFollowedToVertex;
  END;

  // process node with outdegree=0
  // assign them to communities containing only itself
  Start = {v_type};
  Start = SELECT s 
          FROM Start:s
          WHERE s.@sum_outdegree == 0
          ACCUM 
              s.@cc_list += s;
  IF print_info THEN
      PRINT Start.size() AS VertexAssignedToItself;
  END;

  // save result
  Start = {v_type};
  Start = SELECT s 
          FROM Start:s
          POST-ACCUM
              IF result_attr != "" THEN 
                  s.setAttr(result_attr, getvid(s.@cc_list.get(0))) 
              END,
              IF file_path != "" THEN 
                  f.println(s, getvid(s.@cc_list.get(0))) 
              END;

  // print result satistic
  IF print_info THEN
      Start = SELECT s 
              FROM Start:s
              WHERE s.@cc_list.size() > 0
              POST-ACCUM
                  @@community_map += (getvid(s.@cc_list.get(0)) -> 1);
      PRINT @@community_map.size() AS FinalCommunityCount;
  END;
}



set exit_on_error = "true"